// Importing the Metadata type for consistent typing within Next.js projects.
import type { Metadata } from "next";
// Importing the Inter font from Google Fonts, facilitated by Next.js's optimized font handling.
import { Inter } from "next/font/google";
// Importing global styles that will be applied across all components in the application.
import "./globals.css";
// Importing a database instance from a Supabase utility module designed for reuse across the app.
import db from "@/lib/supabase/db";
import { DM_Sans } from 'next/font/google';
import { twMerge } from 'tailwind-merge';
// Importing a custom ThemeProvider for managing light and dark themes in the application.
import { ThemeProvider } from "@/lib/providers/next-theme-provider";
import AppStateProvider from "@/lib/providers/state-provider";
import { SupabaseUserProvider } from '@/lib/providers/supabase-user-provider';
import { Toaster } from '@/components/ui/toaster';
import { SocketProvider } from '@/lib/providers/socket-provider';
// Configuring the Inter font with a specific subset for optimization.
const inter = DM_Sans({ subsets: ['latin'] });


// Defining metadata for the application, typically used in <head> for SEO purposes.
export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

// Define the RootLayout component which wraps around the entire application or certain parts of it.
export default function RootLayout({
  children, // Accepts children elements, which represent nested components or JSX.
}: {
  children: React.ReactNode;
}) {
  // Example of a console log to debug or check the database connection; usually, this would not be in production code.
  // console.log(db)

  // The component returns an HTML structure that sets the language and includes the ThemeProvider for theme management.
  return (
    // Setting the language of the document to English.
    <html lang="en"> 
    {/* // Applying the class name from the Inter font configuration. */}
    <body className={twMerge('bg-background', inter.className)}>
    <ThemeProvider
          attribute="class" // Specifies how themes are applied, here using the class attribute on the <html> element.
          defaultTheme="dark" // Setting the default theme to dark.
          enableSystem // Allows the theme to respect the user's system preferences for light or dark mode.
        >
          {/* // Rendering child components which could be different parts of the application. */}
          <AppStateProvider>
          <SupabaseUserProvider>
          <SocketProvider>
                {children}
                <Toaster />
                </SocketProvider>
            </SupabaseUserProvider>
          </AppStateProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
